{"version":3,"sources":["containers/MainPage/MainPage.module.scss","containers/MainPage/MainPage.js"],"names":["module","exports","key","MainPage","state","logs","roles","1","label","color","2","3","loading","error","idToDel","modalText","getList","setState","axios","get","then","res","receivedLogs","data","catch","err","console","log","response","deleteLogHandler","message","content","delete","updatedLogs","filter","_id","success","duration","goToCreateLogHandler","props","history","push","this","logsTable","className","classes","MessageNoLogs","style","textAlign","fontSize","marginTop","type","onClick","length","columns","title","dataIndex","render","role","tags","date","moment","format","id","map","characters","heroes","previousRank","previousRating","rank","rating","result","dataSource","rowKey","onOk","visible","onCancel","footer","Component"],"mappings":"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","file":"static/js/4.4b5f2c3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainPage\":\"MainPage_MainPage__pCp6N\"};","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { Table, Button, Tag, Modal, message } from 'antd';\r\n\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\r\nimport Card from '../../components/Card/Card';\r\n// import Log from '../../components/Log/Log';\r\n\r\nimport classes from './MainPage.module.scss';\r\n\r\nconst key = 'updatable';\r\n\r\nclass MainPage extends Component {\r\n  state = {\r\n    logs: [],\r\n    roles: {\r\n      1: { label: 'Tank', color: '#218ffe' },\r\n      2: { label: 'Damage', color: '#4A4C4E' },\r\n      3: { label: 'Support', color: '#FA9C1D' },\r\n    },\r\n    loading: false,\r\n    error: false,\r\n    idToDel: null,\r\n    modalText: 'Are you sure you want to delete the log?',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getList();\r\n  }\r\n\r\n  getList = () => {\r\n    this.setState({loading: true});\r\n    axios\r\n      .get('/log/list')\r\n      .then(res => {\r\n        const receivedLogs = res.data.data;\r\n        this.setState({ logs: receivedLogs, loading: false });\r\n      })\r\n      .catch(err => {\r\n        console.log(err.response);\r\n        \r\n        this.setState({ error: true, loading: false });\r\n      });\r\n  };\r\n\r\n  deleteLogHandler = () => {\r\n    const { logs, idToDel } = this.state;\r\n    message.loading({content: 'Deleting...', key});\r\n    axios.delete(`log/delete/${idToDel}`).then(res => {\r\n      const updatedLogs = logs.filter(log => log._id !== idToDel);\r\n      this.setState({\r\n        logs: updatedLogs,\r\n        idToDel: null,\r\n      });\r\n      message.success({content: 'The Log has been successfully deleted!', key, duration: 1})\r\n    });\r\n  };\r\n\r\n  goToCreateLogHandler = () => {\r\n    this.props.history.push('/create');\r\n  };\r\n\r\n  render() {\r\n    const { roles, logs, error, loading, idToDel } = this.state;\r\n\r\n    let logsTable = (\r\n      <>\r\n        <p\r\n          className={classes.MessageNoLogs}\r\n          style={{\r\n            textAlign: 'center',\r\n            fontSize: '24px',\r\n            color: '#FA9C1D',\r\n            marginTop: '40px',\r\n          }}\r\n        >\r\n          You have no logs yet!\r\n        </p>\r\n        <Button type='primary' onClick={this.goToCreateLogHandler}>\r\n          Create Log!\r\n        </Button>\r\n      </>\r\n    );\r\n    if (error) {\r\n      logsTable = <ErrorMessage>Something went wrong!</ErrorMessage>;\r\n    }\r\n    if (logs.length) {\r\n      const columns = [\r\n        {\r\n          title: 'Role',\r\n          dataIndex: 'role',\r\n          render: role => {\r\n            return <Tag color={roles[role].color}>{roles[role].label}</Tag>;\r\n          },\r\n        },\r\n        {\r\n          title: 'Character/Hero',\r\n          dataIndex: 'characters',\r\n          render: tags => {},\r\n        },\r\n        {\r\n          title: 'Map',\r\n          dataIndex: 'map',\r\n        },\r\n        {\r\n          title: 'Previous Rank',\r\n          dataIndex: 'previousRank',\r\n        },\r\n        {\r\n          title: 'Rank',\r\n          dataIndex: 'rank',\r\n        },\r\n        {\r\n          title: 'Result',\r\n          dataIndex: 'result',\r\n          render: res => (res > 0 ? `+${res}` : res),\r\n        },\r\n        {\r\n          title: 'Date',\r\n          dataIndex: 'date',\r\n          render: date => moment(date).format('DD-MM-YYYY'),\r\n        },\r\n        // {\r\n        //   title: 'Updated at',\r\n        //   dataIndex: 'updated',\r\n        //   render: updated => moment(updated).format('DD-MM-YYYY'),\r\n        // },\r\n        {\r\n          dataIndex: '_id',\r\n          render: id => (\r\n              <Button\r\n                type='danger'\r\n                onClick={() => this.setState({ idToDel: id })}\r\n              >\r\n                Delete\r\n              </Button>\r\n          ),\r\n        },\r\n      ];\r\n      const data = logs.map(log => {\r\n        return {\r\n          _id: log._id,\r\n          role: log.role,\r\n          characters: log.heroes,\r\n          map: log.map,\r\n          previousRank: log.previousRating,\r\n          rank: log.rating,\r\n          result: log.result,\r\n          date: log.date,\r\n          // updated: log.updatedAt,\r\n        };\r\n      });\r\n      logsTable = <Table columns={columns} dataSource={data} rowKey='_id' />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.MainPage}>\r\n        <Card>\r\n          {!loading ? (\r\n            <>\r\n              <Modal\r\n                // title='Are you sure you want to delete the log?'\r\n                onOk={this.deleteLogHandler}\r\n                visible={!!idToDel}\r\n                onCancel={() => this.setState({ idToDel: null })}\r\n                footer={[\r\n                  <Button\r\n                    key={'cancel'}\r\n                    onClick={() => this.setState({ idToDel: null })}\r\n                  >\r\n                    Cancel\r\n                  </Button>,\r\n                  <Button\r\n                    key={'delete'}\r\n                    type='danger'\r\n                    onClick={this.deleteLogHandler}\r\n                  >\r\n                    Delete\r\n                  </Button>,\r\n                ]}\r\n              >\r\n                <p style={{ fontSize: 18 }}>{this.state.modalText}</p>\r\n              </Modal>\r\n              {logsTable}\r\n            </>\r\n          ) : (\r\n            <Spinner />\r\n          )}\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}